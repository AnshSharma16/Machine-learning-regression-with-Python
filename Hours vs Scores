# Importing necessary libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Reading the CSV file
df = pd.read_csv('student_scores.csv')

# Extracting features (x) and target variable (y)
x = df.iloc[:, :-1].values
y = df.iloc[:, 1].values

# Splitting the dataset into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=40)

# Fitting the linear regression model to the training set
reg = LinearRegression()
reg.fit(x_train, y_train)

# Prediction of test set results
y_pred = reg.predict(x_test)
x_pred=reg.predict(x_train)

# Cross-validation with 5 folds
cv_scores = cross_val_score(reg, x, y, cv=5, scoring='r2')

print("Cross-validation scores:", cv_scores)
print("Mean cross-validation R-squared:", np.mean(cv_scores))

# Visualizing the train set results
plt.scatter(x_train, y_train, color='red', label='Actual')
plt.plot(x_train, x_pred, color='green', label='Predicted')
plt.title('Hours vs Scores (Training set)')
plt.xlabel('Hours')
plt.ylabel('Scores')
plt.legend()
plt.show()

# Visualizing the test set results
plt.scatter(x_test, y_test, color='red', label='Actual')
plt.plot(x_test, y_pred, color='green', label='Predicted')
plt.title('Hours vs Scores (Testing set)')
plt.xlabel('Hours')
plt.ylabel('Scores')
plt.legend()
plt.show()

# Calculate errors 
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r_squared = r2_score(y_test, y_pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("R-squared:", r_squared)

# Train and test scores
print('Train Score:', reg.score(x_train, y_train))
print('Test Score:', reg.score(x_test, y_test))

